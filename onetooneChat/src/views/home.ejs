<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat APP</title>
</head>
<style>
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    .container {
        width: 100%;
        height: 100vh;
        background: #212121;
        display: flex;
        flex-direction: row;
        align-items: center;
        justify-content: space-evenly;
    }

    .row {
        width: 50%;
        height: 40vmax;
        box-shadow: 0px 2px 4px 4px gray;
        background: white;

        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: space-around;

    }

    .row1 {
        background-color: #AD49E1;
        width: 20%;
        height: 40vmax;
        margin-left: 5vw;
        margin-right: -11.7vw;
        display: flex;
        flex-direction: column;
        align-items: start;

    }

    .row1 h2 {
        background-color: #2E073F;
        width: 100%;
        height: 4vmax;
        color: white;
        padding: 10px;
    }

    .row1 .boxforuser {
        width: 100%;
        height: 36vmax;

    }

    .row1 .boxforuser ul li {
        list-style: none;
        width: 100%;
        margin: 0;
    }

    header {
        background-color: #2E073F;
        width: 100%;
        height: 4vmax;
        display: flex;
        flex-direction: row;
        align-items: start;
    }

    header h2 {
        margin-top: 10px;
        color: white;
        text-shadow: 2px 2px gray;
    }

    .middlebox {
        width: 100%;
        height: 35vmax;
        overflow: auto;
        background-color: #AD49E1;
    }

    footer {

        width: 100%;
        height: 4vmax;
        display: flex;
        flex-direction: row;
        align-items: center;
        justify-content: space-evenly;
        border-top: 2px solid black;
    }

    .myInput {
        width: 42vmax;
        height: 4vmax;
        padding: 15px;
        border: 0;
        outline: 0;
        font-size: 1.1vmax;


    }

    /* From Uiverse.io by alexmaracinaru */
    .btn {
        width: 8vmax;
        height: 4vmax;
        padding: 15px;
        cursor: pointer;
        font-weight: 700;
        transition: all 0.2s;
        padding: 10px 20px;

        background: #2E073F;
        border: 1px solid transparent;
        display: flex;
        align-items: center;
        font-size: 15px;
    }

    .btn:hover {
        background: #2E073F;
    }

    .btn>svg {
        width: 34px;
        margin-left: 10px;
        transition: transform 0.3s ease-in-out;
    }

    .btn:hover svg {
        transform: translateX(5px);
    }

    .btn:active {
        transform: scale(0.95);
    }

    /* back button */
    /* From Uiverse.io by xopc333 */
    .button1 {
        display: block;
        position: relative;
        width: 46px;
        height: 46px;
        margin: 0;
        overflow: hidden;
        outline: none;
        background-color: transparent;
        cursor: pointer;
        border: 0;
    }

    .button1:before,
    .button1:after {
        content: "";
        position: absolute;
        border-radius: 50%;
        inset: 7px;
    }

    .button1:before {
        border: 4px solid #f0eeef;
        transition: opacity 0.4s cubic-bezier(0.77, 0, 0.175, 1) 80ms,
            transform 0.5s cubic-bezier(0.455, 0.03, 0.515, 0.955) 80ms;
    }

    .button1:after {
        border: 4px solid #ffffff;
        transform: scale(1.3);
        transition: opacity 0.4s cubic-bezier(0.165, 0.84, 0.44, 1),
            transform 0.5s cubic-bezier(0.25, 0.46, 0.45, 0.94);
        opacity: 0;
    }

    .button1:hover:before,
    .button1:focus:before {
        opacity: 0;
        transform: scale(0.7);
        transition: opacity 0.4s cubic-bezier(0.165, 0.84, 0.44, 1),
            transform 0.5s cubic-bezier(0.25, 0.46, 0.45, 0.94);
    }

    .button1:hover:after,
    .button1:focus:after {
        opacity: 1;
        transform: scale(1);
        transition: opacity 0.4s cubic-bezier(0.77, 0, 0.175, 1) 80ms,
            transform 0.5s cubic-bezier(0.455, 0.03, 0.515, 0.955) 80ms;
    }

    .button-box {
        display: flex;
        position: absolute;
        top: 0;
        left: 0;
    }

    .button-elem {
        display: block;
        width: 15px;
        height: 15px;
        margin: 15px 16px 2px 14px;
        transform: rotate(180deg);
        fill: #f0eeef;
    }

    .button1:hover .button-box,
    .button1:focus .button-box {
        transition: 0.4s;
        transform: translateX(-56px);
    }

    li {
        margin: 10px;
        width: 50%;

        list-style: none;
        font-size: larger;
        box-shadow: 2px 0px 2px 0px gray;
        outline: 1px solid rgb(148, 138, 138);
        border-radius: 3px;
        display: inline-block;
        padding: 10px;
    }
</style>

<body>
    <div class="container">
        <div class="row row1">
            <h2>
                <%= user.name %>
            </h2>
            <div class="boxforuser">
                <ul>
                    <% alluser.forEach(element=> { %>
                        <li data-username="<%= element.FullName %>" onclick="setiD('<%= element._id %>')">
                            <%= element.FullName %>
                        </li>
                        <% }) %>
                </ul>

            </div>
        </div>
        <div class="row">
            <header>

                <button class="button1">
                    <div class="button-box">
                        <span class="button-elem">
                            <svg viewBox="0 0 46 40" xmlns="http://www.w3.org/2000/svg">
                                <path
                                    d="M46 20.038c0-.7-.3-1.5-.8-2.1l-16-17c-1.1-1-3.2-1.4-4.4-.3-1.2 1.1-1.2 3.3 0 4.4l11.3 11.9H3c-1.7 0-3 1.3-3 3s1.3 3 3 3h33.1l-11.3 11.9c-1 1-1.2 3.3 0 4.4 1.2 1.1 3.3.8 4.4-.3l16-17c.5-.5.8-1.1.8-1.9z">
                                </path>
                            </svg>
                        </span>
                        <span class="button-elem">
                            <svg viewBox="0 0 46 40">
                                <path
                                    d="M46 20.038c0-.7-.3-1.5-.8-2.1l-16-17c-1.1-1-3.2-1.4-4.4-.3-1.2 1.1-1.2 3.3 0 4.4l11.3 11.9H3c-1.7 0-3 1.3-3 3s1.3 3 3 3h33.1l-11.3 11.9c-1 1-1.2 3.3 0 4.4 1.2 1.1 3.3.8 4.4-.3l16-17c.5-.5.8-1.1.8-1.9z">
                                </path>
                            </svg>
                        </span>
                    </div>
                </button>

                <h2 class="chatboxUser">User</h2>

            </header>
            <div class="middlebox">
                <ul id="messageList">
                    <li>Welcome to the chat!</li>
                </ul>
            </div>
            <footer>
                <span><input type="text" class="myInput"></span>
                <span>
                    <button class="btn">

                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 74 74" height="35" width="37">

                            <circle stroke-width="6" stroke="white" r="35.5" cy="37" cx="37"></circle>
                            <path fill="white"
                                d="M25 35.5C24.1716 35.5 23.5 36.1716 23.5 37C23.5 37.8284 24.1716 38.5 25 38.5V35.5ZM49.0607 38.0607C49.6464 37.4749 49.6464 36.5251 49.0607 35.9393L39.5147 26.3934C38.9289 25.8076 37.9792 25.8076 37.3934 26.3934C36.8076 26.9792 36.8076 27.9289 37.3934 28.5147L45.8787 37L37.3934 45.4853C36.8076 46.0711 36.8076 47.0208 37.3934 47.6066C37.9792 48.1924 38.9289 48.1924 39.5147 47.6066L49.0607 38.0607ZM25 38.5L48 38.5V35.5L25 35.5V38.5Z">
                            </path>
                        </svg>
                    </button>
                </span>
            </footer>

        </div>
    </div>
</body>

</html>
<!-- Socket.IO Script -->
<script src="/socket.io/socket.io.js"></script>
<script>
    const socket = io();
    const getInputValue = document.querySelector(".myInput");
    const sendButton = document.querySelector('.btn');
    const myul = document.querySelector('.middlebox ul');

    let currentRoom = ''; // Track the current room

    // Function to join a room and retrieve its chat history
    function joinRoom(roomName) {
        if (currentRoom) {
            socket.emit('leaveRoom', currentRoom); // Leave the previous room
        }
        currentRoom = roomName;
        socket.emit('joinRoom', roomName); // Join the new room

        // Clear the chatbox for the new room
        myul.innerHTML = '';

        // Request chat history for the new room
        socket.emit('getChatHistory', roomName);
    }

    // Listen for incoming messages from the server
    socket.on('recivemessage', (message) => {
        const createli = document.createElement('li');
        createli.textContent = message;
        myul.appendChild(createli);
    });

    // Listen for chat history and load it into the chatbox
    socket.on('chatHistory', (messages) => {
        // myul.innerHTML = ''; // Clear the current messages
        console.log(messages);
        
        messages.map((message) => {
            const createli = document.createElement('li');
            createli.textContent = message.content;
            myul.appendChild(createli);
        });
    });

  // Send a chat message when pressing the "Send" button or hitting "Enter"
  document.addEventListener('keypress', (event) => {
      if (event.key === 'Enter' && getInputValue.value) {
        sendMessage();
      }
    });

    // Send button event listener
    sendButton.addEventListener('click', () => {
      sendMessage();
    });
function sendMessage() {
    const message = getInputValue.value;
        if (message.trim() && currentRoom) {
            socket.emit('chatMessage', { message, room: currentRoom, to:currentRoom, from:selectedUserId });
            getInputValue.value = ''; // Clear the input field after sending
        } else {
            alert("Please select a user to chat with!");
        }
}
    // // Send message when button is clicked
    // sendButton.addEventListener('click', () => {
    //     const message = getInputValue.value;
    //     if (message.trim() && currentRoom) {
    //         socket.emit('chatMessage', { message, room: currentRoom, to:currentRoom, from:selectedUserId });
    //         getInputValue.value = ''; // Clear the input field after sending
    //     } else {
    //         alert("Please select a user to chat with!");
    //     }
    // });

    // Variable to store the selected user's ID
    let selectedUserId = null;

    // Function to set the user ID when a user is selected
    function setiD(id) {
        selectedUserId = id;
        console.log('Selected User ID:', id);
    }

    // Add event listener for selecting a user to chat with (joining a room)
    const userListItems = document.querySelectorAll('.boxforuser ul li');
    const chatboxUser = document.querySelector('.chatboxUser');
    userListItems.forEach((item) => {
        item.addEventListener('click', () => {
            chatboxUser.textContent = item.textContent.trim(); // Update the selected user's name
            const userName = item.textContent.trim();

            joinRoom(userName); // Join the room for the selected user
        });
    });

</script>